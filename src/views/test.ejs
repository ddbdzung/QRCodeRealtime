<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <script src="/scripts/html5-qrcode.min.js" type="text/javascript"></script>
  <script src="/scripts/socket.io.min.js" type="text/javascript"></script>
</head>

<body>
  <div style="width: 400px" id="reader"></div>
  <script>
    var socket = io.connect('http://localhost:3002')
    function modelizeDecodedText(decodedText) {
      let textArr = decodedText.split('~~')
      const constant = ['fullname', 'email', 'identityNumber', 'className']
      let keyArr = []
      let valueArr = []
      for (let i = 0; i < textArr.length; i++) {
        if (i % 2 === 0) {
          keyArr.push(textArr[i])
        } else {
          valueArr.push(textArr[i])
        }
      }
      let objModel = {}
      for (let i = 0; i < constant.length; i++) {
        objModel[keyArr[i]] = valueArr[i]
      }
      return objModel
    }

    function postData(url, data) {
      return new Promise((resolve, reject) => {
        fetch(url, {
          method: 'POST',
          mode: 'cors',
          headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        })
        .then(res => {
          console.log(res.status)
          return resolve(res.json())
        })
        .catch(err => {
          return reject(err)
        })
      })
    }

    async function onScanSuccess(decodedText, decodedResult) {
      // Handle on success condition with the decoded text or result.
      let decodedData = modelizeDecodedText(decodedText)
      
      // Stop scan
      html5QrcodeScanner.clear()

      // POST CTV data to server once when scan successfully
      // try {
      //   let resu = await postData('http://localhost:3002/saveCTV', decodedData)
      //   alert(resu.message)
      //   location.href = 'http://localhost:3002/test'
      // } catch (error) {
      //   alert('Fail to scan, please reload page and try again')
      // }

      // POST data using socket
      socket.emit('scanned', decodedData)
      socket.on('success', data => {
        alert('Tạo CTV thành công')
        location.href = 'http://localhost:3002/test'
      })
      socket.on('error', data => {
        alert('CTV đã tồn tại')
        location.href = 'http://localhost:3002/test'
      })
    }

    let config = {
      fps: 10,
      qrbox: { width: 200, height: 200 },
      rememberLastUsedCamera: true,
      // Only support camera scan type.
      supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA]
    };

    var html5QrcodeScanner = new Html5QrcodeScanner(
      "reader", config);
    html5QrcodeScanner.render(onScanSuccess)
  </script>
</body>

</html>
